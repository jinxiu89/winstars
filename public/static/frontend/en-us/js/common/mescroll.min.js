/*!
 * mescroll -- 精致的下拉刷新和上拉加载js框架  ( a great JS framework for pull-refresh and pull-up-loading )
 * version 1.3.2
 * 2018-01-01
 * author: wenju < mescroll@qq.com > 文举
 * 
 * 官网:	http://www.mescroll.com
 * 文档:	https://github.com/mescroll/mescroll.git
 * 动态:	https://github.com/mescroll/mescroll-versions
 * 问答:http://www.mescroll.com/qa.html
 * issues: https://github.com/mescroll/mescroll/issues
 */
(function (a, b) {
    var c = typeof define === "function", d = typeof module !== "undefined" && module.exports;
    if (c) {
        define(b)
    } else {
        if (d) {
            module.exports = b()
        } else {
            this[a] = b()
        }
    }
})("MeScroll", function () {
    var a = function (b, e) {
        var g = this;
        g.version = "1.3.2";
        g.isScrollBody = (!b || b == "body");
        g.scrollDom = g.isScrollBody ? document.body : g.getDomById(b);
        if (!g.scrollDom) {
            return
        }
        g.options = e || {};
        var d = navigator.userAgent;
        var c = !!d.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
        var h = typeof window.orientation == "undefined";
        var f = d.indexOf("Android") > -1 || d.indexOf("Adr") > -1;
        g.os = {ios: c, pc: h, android: f};
        g.isDownScrolling = false;
        g.isUpScrolling = false;
        g.initDownScroll();
        setTimeout(function () {
            if (g.optDown.use && g.optDown.auto) {
                if (g.optDown.autoShowLoading) {
                    g.triggerDownScroll()
                } else {
                    g.optDown.callback && g.optDown.callback(g)
                }
            }
        }, 30)
    };
    a.prototype.extendDownScroll = function (b) {
        a.extend(b, {
            use: true,
            outOffsetRate: 0.2,
            bottomOffset: 20,
            warpClass: "mescroll-downwarp",
            beforeLoading: function (d, c) {
                return false
            }
        })
    };
    a.extend = function (c, b) {
        for (var key in b) {
            if (c[key] == null) {
                c[key] = b[key]
            } else {
                if (typeof c[key] == "object") {
                    a.extend(c[key], b[key])
                }
            }
        }
        return c
    };
    a.prototype.initDownScroll = function () {
        var c = this;
        c.optDown = c.options.down || {};
        c.extendDownScroll(c.optDown);
        c.touchstartEvent = function (d) {
            if (c.isScrollTo) {
                d.preventDefault()
            }
            c.startPoint = c.getPoint(d);
            c.lastPoint = c.startPoint;
            c.inTouchend = false;
            if (c.os.pc && c.getScrollTop() <= 0) {
                c.scrollDom.addEventListener("mousemove", c.touchmoveEvent);
                document.ondragstart = function () {
                    return false
                }
            }
        };
        c.scrollDom.addEventListener("mousedown", c.touchstartEvent);
        c.scrollDom.addEventListener("touchstart", c.touchstartEvent);
        c.touchmoveEvent = function (l) {
            var d = c.getScrollTop();
            var h = c.getPoint(l);
            var f = h.y - c.startPoint.y;
            if (f > 0) {
                if (d <= 0) {
                    if (l.cancelable && !l.defaultPrevented) {
                        l.preventDefault()
                    }
                    if (c.optDown.use && !c.inTouchend && !c.isDownScrolling && !c.optDown.isLock && (!c.isUpScrolling || (c.isUpScrolling && c.optUp.isBoth))) {
                        var o = Math.abs(c.lastPoint.x - h.x);
                        var n = Math.abs(c.lastPoint.y - h.y);
                        var m = Math.sqrt(o * o + n * n);
                        if (m != 0) {
                            var g = Math.asin(n / m) / Math.PI * 180;
                            if (g < c.optDown.minAngle) {
                                return
                            }
                        }
                        if (c.maxTouchmoveY > 0 && h.y >= c.maxTouchmoveY) {
                            c.inTouchend = true;
                            c.touchendEvent();
                            return
                        }
                        var p = h.y - c.lastPoint.y;
                        if (!c.downHight) {
                            c.downHight = 0
                        }
                        if (c.downHight < c.optDown.offset) {
                            if (c.movetype != 1) {
                                c.movetype = 1;
                                c.optDown.inOffset(c);
                                c.downwarp.classList.remove(c.optDown.resetClass);
                                c.scrollDom.classList.add(c.optDown.hardwareClass);
                                c.scrollDom.style.webkitOverflowScrolling = "auto";
                                c.isMoveDown = true
                            }
                            c.downHight += p
                        } else {
                            if (c.movetype != 2) {
                                c.movetype = 2;
                                c.optDown.outOffset(c);
                                c.downwarp.classList.remove(c.optDown.resetClass);
                                c.scrollDom.classList.add(c.optDown.hardwareClass);
                                c.scrollDom.style.webkitOverflowScrolling = "auto";
                                c.isMoveDown = true
                            }
                            if (p > 0) {
                                c.downHight += p * c.optDown.outOffsetRate
                            } else {
                                c.downHight += p
                            }
                        }
                        c.downwarp.style.height = c.downHight + "px";
                        var k = c.downHight / c.optDown.offset;
                        c.optDown.onMoving(c, k, c.downHight)
                    }
                }
            }
            c.lastPoint = h
        };
        c.scrollDom.addEventListener("touchmove", c.touchmoveEvent);
        c.touchendEvent = function () {
            if (c.optDown.use && c.isMoveDown) {
                if (c.downHight >= c.optDown.offset) {
                    c.triggerDownScroll()
                } else {
                    c.downwarp.classList.add(c.optDown.resetClass);
                    c.downHight = 0;
                    c.downwarp.style.height = 0
                }
                c.scrollDom.style.webkitOverflowScrolling = "touch";
                c.scrollDom.classList.remove(c.optDown.hardwareClass);
                c.movetype = 0;
                c.isMoveDown = false
            }
            if (c.os.pc) {
                c.scrollDom.removeEventListener("mousemove", c.touchmoveEvent);
                document.ondragstart = function () {
                    return true
                }
            }
        };
        c.scrollDom.addEventListener("mouseup", c.touchendEvent);
        c.scrollDom.addEventListener("mouseleave", c.touchendEvent);
        c.scrollDom.addEventListener("touchend", c.touchendEvent);
        c.scrollDom.addEventListener("touchcancel", c.touchendEvent);
        if (c.optDown.use) {
            c.downwarp = document.createElement("div");
            c.downwarp.className = c.optDown.warpClass;
            c.downwarp.innerHTML = '<div class="downwarp-content">' + c.optDown.htmlContent + "</div>";
            var b = c.optDown.warpId ? c.getDomById(c.optDown.warpId) : c.scrollDom;
            if (c.optDown.warpId && b) {
                b.appendChild(c.downwarp)
            } else {
                if (!b) {
                    b = c.scrollDom
                }
                b.insertBefore(c.downwarp, c.scrollDom.firstChild)
            }
            setTimeout(function () {
                c.optDown.inited(c, c.downwarp)
            }, 0)
        }
    };
    a.prototype.getPoint = function (b) {
        return {x: b.touches ? b.touches[0].pageX : b.clientX, y: b.touches ? b.touches[0].pageY : b.clientY}
    };
    a.prototype.triggerDownScroll = function () {
        if (!this.optDown.beforeLoading(this, this.downwarp)) {
            this.showDownScroll();
            this.optDown.callback && this.optDown.callback(this)
        }
    };
    a.prototype.showDownScroll = function () {
        this.isDownScrolling = true;
        this.optDown.showLoading(this);
        this.downHight = this.optDown.offset;
        this.downwarp.classList.add(this.optDown.resetClass);
        this.downwarp.style.height = this.optDown.offset + "px"
    };

    a.prototype.getScrollTop = function () {
        if (this.isScrollBody) {
            return document.documentElement.scrollTop || document.body.scrollTop
        } else {
            return this.scrollDom.scrollTop
        }
    };
    a.prototype.getDomById = function (c) {
        var b;
        if (c) {
            b = document.getElementById(c)
        }
        if (!b) {
            console.error('the element with id as "' + c + '" can not be found: document.getElementById("' + c + '")==null')
        }
        return b
    };
    return a
});
